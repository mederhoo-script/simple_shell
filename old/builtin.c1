#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

#define MAX_PATH_LENGTH 4096

extern char **environ;

/**
 * builtin_env - Print the environment variables.
 */
void builtin_env(void)
{
    char **env;
    
    env = environ;
    while (*env)
    {
        write(STDOUT_FILENO, *env, strlen(*env));
        write(STDOUT_FILENO, "\n", 1);
        env++;
    }
}

/**
 * builtin_setenv - Set environment variables.
 * @args: Arguments passed to the setenv command.
 */
void builtin_setenv(char **args)
{
    char *variable, *value;
    
    if (args[1] != NULL && args[2] != NULL)
    {
        variable = args[1];
        value = args[2];
        if (setenv(variable, value, 1) != 0)
        {
            perror("setenv");
        }
    }
    else
    {
        write(STDERR_FILENO, "Usage: setenv VARIABLE VALUE\n", 29);
    }
}

/**
 * builtin_unsetenv - Unset environment variables.
 * @args: Arguments passed to the unsetenv command.
 */
void builtin_unsetenv(char **args)
{
    char *variable;
    
    if (args[1] != NULL)
    {
        variable = args[1];
        if (unsetenv(variable) != 0)
        {
            perror("unsetenv");
        }
    }
    else
    {
        write(STDERR_FILENO, "Usage: unsetenv VARIABLE\n", 25);
    }
}

/**
 * builtin_cd - Change the current directory.
 * @args: Arguments passed to the cd command.
 */
void builtin_cd(char **command_and_args)
{
    char prev_dir[MAX_PATH_LENGTH] = "";
   /* char **env = NULL; */

    if (strcmp(command_and_args[1], "-") == 0)
    {
        if (prev_dir[0] != '\0')
        {
            chdir(prev_dir);
        }
    }
    else
    {
        if (getcwd(prev_dir, sizeof(prev_dir)) == NULL)
        {
            perror("getcwd");
        }
        if (chdir(command_and_args[1]) != 0)
        {
            perror("chdir");
        }
    }
	
}

/**
 * builtin_exit -exit
 * @args: arg to exit
 */
void builtin_exit(char **command_and_args)
{		int exit_status;

	 exit_status = 0;
            if (command_and_args[1] != NULL)
            {
                exit_status = atoi(command_and_args[1]);
            }
            _exit(exit_status);
}
/**
 * builtin_path -path
 * @arg: to path
 */
int builtin_path(const char *input)
{
    pid_t pid;
    char *args[2];
    char errorMsg[50];

    pid = fork();

    if (pid == 0)  /* Child process */
    {
        args[0] = (char *)input;
        args[1] = NULL;

        execve(input, args, NULL);

        /* If execve fails */
        snprintf(errorMsg, sizeof(errorMsg), "./shell: %s: No such file or directory\n", input);
        write(STDERR_FILENO, errorMsg, strlen(errorMsg));
        _exit(1);
    }
    else if (pid < 0)  /* Fork failed */
    {
        char forkErrorMsg[] = "./shell: Fork failed\n";
        write(STDERR_FILENO, forkErrorMsg, strlen(forkErrorMsg));
    }
    else  /* Parent process */
    {
        waitpid(pid, NULL, 0);  /* Wait for the child process to finish */
    }

    return 0;
}
